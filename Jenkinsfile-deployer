#!groovy

def workerNode = "devel8"

void deploy(String deployEnvironment) {
    dir("deploy") {
        git(url: "gitlab@git-platform.dbc.dk:metascrum/deploy.git", credentialsId: "gitlab-meta")
    }
    sh """
		virtualenv -p python3 .
		. bin/activate
		pip3 install --upgrade pip
		pip3 install -U -e \"git+https://github.com/DBCDK/mesos-tools.git#egg=mesos-tools\"
		marathon-config-producer updateservice-${deployEnvironment} --root deploy/marathon --template-keys DOCKER_TAG=${env.BRANCH_NAME}-${env.BUILD_NUMBER} -o updateservice-${deployEnvironment}.json
		marathon-deployer -a ${MARATHON_TOKEN} -b https://mcp1.dbc.dk:8443 deploy updateservice-${deployEnvironment}.json
	"""
}

pipeline {
    agent { label workerNode }

    environment {
        MARATHON_TOKEN = credentials("METASCRUM_MARATHON_TOKEN")
        DOCKER_IMAGE_VERSION = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        GITOPS_DEPLOY_TAG = "master-3"
        GITLAB_PRIVATE_TOKEN = credentials("metascrum-gitlab-api-token")
    }

    options {
        timestamps()
    }

    stages {
        stage("Clear workspace") {
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage("Build docker") {
            steps {
                script {
                    def docker_tag = sh(
                            script: "curl -f --globoff \"https://is.dbc.dk/view/metascrum/job/updateservice/job/tag-updateservice-for-prod/lastSuccessfulBuild/api/xml?xpath=//action/parameter/name[text()=\'DOCKER_TAG\']/following-sibling::value\" | sed -rn 's|<value>(.+)</value>|\\1|p'",
                            returnStdout: true
                    ).trim()
                    echo "New docker tag: ${docker_tag}"
                    sh "./bin/run-js-tests.sh ${env.GIT_COMMIT}"
                    def image = docker.build("docker-i.dbc.dk/update-payara-deployer-prod:${DOCKER_IMAGE_VERSION}", ". -f docker/deploy/Dockerfile --build-arg UPDATE_PAYARA_DEPLOYER_DOCKER_TAG=${docker_tag}")
                    image.push()
                }
            }
        }

        stage("Deploy production") {
            when {
                branch "master"
            }
            steps {
                deploy("prod-boblebad-bks")
                deploy("prod-boblebad-fbs")
                deploy("prod-boblebad-dataio")

                deploy("prod-cisterne-fbs")
                deploy("prod-cisterne-dataio")
            }
        }

        stage("Deploy production k8s") {
            agent {
                docker {
                    label workerNode
                    image "docker.dbc.dk/gitops-deploy-env:${env.GITOPS_DEPLOY_TAG}"
                    alwaysPull true
                }
            }
            when {
                expression {
                    (currentBuild.result == null || currentBuild.result == 'SUCCESS') && env.BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    dir("deploy") {
                        sh """
							set-new-version update-bks-service.yml ${env.GITLAB_PRIVATE_TOKEN} metascrum/updateservice-deploy ${DOCKER_IMAGE_VERSION} -b boblebad
                            set-new-version update-fbs-service.yml ${env.GITLAB_PRIVATE_TOKEN} metascrum/updateservice-deploy ${DOCKER_IMAGE_VERSION} -b boblebad
                            set-new-version update-dataio-service.yml ${env.GITLAB_PRIVATE_TOKEN} metascrum/updateservice-deploy ${DOCKER_IMAGE_VERSION} -b boblebad
                            
                            set-new-version update-fbs-service.yml ${env.GITLAB_PRIVATE_TOKEN} metascrum/updateservice-deploy ${DOCKER_IMAGE_VERSION} -b cisterne
                            set-new-version update-dataio-service.yml ${env.GITLAB_PRIVATE_TOKEN} metascrum/updateservice-deploy ${DOCKER_IMAGE_VERSION} -b cisterne
						"""
                    }
                }
            }
        }
    }
}